#required.item.itemName=상품 이름은 필수입니다.
#range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
#max.item.quantity=수량은 최대 {0} 까지 허용합니다.
#totalPriceMin=가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#==ObjectError==
#Level1
totalPriceMin.item=상품의 가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#Level2 - 생략
totalPriceMin=전체 가격은 {0}원 이상이어야 합니다. 현재 값 = {1}


#==FieldError==
#Level1
required.item.itemName=상품 이름은 필수입니다.
range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
max.item.quantity=수량은 최대 {0} 까지 허용합니다.

#Level2 - 생략

#Level3
required.java.lang.String = 필수 문자입니다.
required.java.lang.Integer = 필수 숫자입니다.
min.java.lang.String = {0} 이상의 문자를 입력해주세요.
min.java.lang.Integer = {0} 이상의 숫자를 입력해주세요.
range.java.lang.String = {0} ~ {1} 까지의 문자를 입력해주세요.
range.java.lang.Integer = {0} ~ {1} 까지의 숫자를 입력해주세요.
max.java.lang.String = {0} 까지의 숫자를 허용합니다.
max.java.lang.Integer = {0} 까지의 숫자를 허용합니다.

#Level4
required = 필수 값 입니다.
min= {0} 이상이어야 합니다.
range= {0} ~ {1} 범위를 허용합니다.
max= {0} 까지 허용합니다.

#추가
typeMismatch.java.lang.Integer=숫자를 입력해주세요.
typeMismatch=타입 오류입니다.


# ======= BeanValidation 메시지 찾는 순서 =======
# 1. 생성된 메시지 코드 순서대로 messageSource 에서 메시지 찾기
# 2. 애노테이션의 message 속성 사용 @NotBlank(message = "공백! {0}")
# 3. 라이브러리가 제공하는 기본 값 사용 공백일 수 없습니다.

NotBlank.item.itemName={0} 공백 X
#NotBlank.itemName=
#NotBlank.java.lang.String=
#NotBlank=

Range.item.price={0}, {2} ~ {1} 허용
#Range.price
#Range.java.lang.Integer
#Range

Max.item.quantity={0}, 최대 {1}

NotNull.price={0} null X
NotNull.quantity={0} null X

ScriptAssert.item={0}, {1}, {2} price * quantity >= 10000
ScriptAssert=